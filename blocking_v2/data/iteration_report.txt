Source Line  Source                                                                                                                 CPU Time  Spin Time:Imbalance or Serial Spinning (OpenMP)  Spin Time:Lock Contention (OpenMP)  Spin Time:Communication (MPI)  Spin Time:Other  Overhead Time:Creation (OpenMP)  Overhead Time:Scheduling (OpenMP)  Overhead Time:Reduction (OpenMP)  Overhead Time:Other
-----------  ---------------------------------------------------------------------------------------------------------------------  --------  -----------------------------------------------  ----------------------------------  -----------------------------  ---------------  -------------------------------  ---------------------------------  --------------------------------  -------------------
53           /**                                                                                                                                                                                                                                                                                                                                                                                            
54            * Pr(x) = (1-d)/n + d*sum_{n in g(n,x)}(Pr(n)/(outdegree n))                                                                                                                                                                                                                                                                                                                                  
55            * Runs 1 iteration of pagerank                                                                                                                                                                                                                                                                                                                                                                
56            * Returns 1 if done, 0 otherwise                                                                                                                                                                                                                                                                                                                                                              
57            */                                                                                                                                                                                                                                                                                                                                                                                            
58           int run_iteration(int n, double d, int* restrict g, double* restrict w, double* restrict wnew, int* restrict degree)                                                                                                                                                                                                                                                                           
59           {                                                                                                                                                                                                                                                                                                                                                                                              
60               int iterationDone = 1;                                                                                                                                                                                                                                                                                                                                                                     
61               #pragma omp parallel shared(w, wnew) reduction(&& : iterationDone)                                                                                                                                                                                                                                                                                                                         
62               {                                                                                                                                                                                                                                                                                                                                                                                          
63                   int this_thread = omp_get_thread_num(), num_threads = omp_get_num_threads();                                                                                                                                                                                                                                                                                                           
64                   int start = (n/num_threads) * this_thread;                                                                                                                                                                                                                                                                                                                                             
65                   int count;                                                                                                                                                                                                                                                                                                                                                                             
66                   if (this_thread == num_threads - 1) {                                                                                                                                                                                                                                                                                                                                                  
67                       count = n - start;                                                                                                                                                                                                                                                                                                                                                                 
68                   } else {                                                                                                                                                                                                                                                                                                                                                                               
69                       count = ((n/num_threads) * (this_thread + 1)) - start;                                                                                                                                                                                                                                                                                                                             
70                   }                                                                                                                                                                                                                                                                                                                                                                                      
71                   double* wlocal = (double*)calloc(count, sizeof(double));                                                                                                                                                                                                                                                                                                                               
72                   memcpy(wlocal, wnew+start, count * sizeof(double));                                                                                                                                                                                                                                                                                                                                    
73                   int done = 0;                                                                                                                                                                                                                                                                                                                                                                          
74                   while (!done) {                                                                                                                                                                                                                                                                                                                                                                        
75                       done = run_block(n, d, g, w, wnew, degree, start, count, wlocal);                                                                                                                                                                                                                                                                                                                  
76                       memcpy(wnew+start, wlocal, count * sizeof(double));                                                                                                                                                                                                                                                                                                                                
77                   }                                                                                                                                                                                                                                                                                                                                                                                      
78                   free(wlocal);                                                                                                                                                                                                                                                                                                                                                                          
79                   #pragma omp barrier                                                                                                                                                                                                                                                                                                                                                                    
80                   for(int i=start; i<start+count; i++){                                                                                                                                                                                                                                                                                                                                                  
81                       iterationDone = iterationDone && (fabs(w[i] - wnew[i]) < 1.0/(1000.0 * (double)n));                                                                                                                                                                                                                                                                                                
82                       w[i] = wnew[i];                                                                                                                                                                                                                                                                                                                                                                    
83                   }                                                                                                                                                                                                                                                                                                                                                                                      
84               }                                                                                                                                                                                                                                                                                                                                                                                          
85               return iterationDone;                                                                                                                                                                                                                                                                                                                                                                      
86           }                                                                                                                                                                                                                                                                                                                                                                                              
87                                                                                                                                                                                                                                                                                                                                                                                                          
