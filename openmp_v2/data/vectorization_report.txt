
Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at mt19937p.c(59,5) inlined into pagerank.c(174,14)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between mt line 60 and mt line 60
LOOP END

LOOP BEGIN at mt19937p.c(59,5) inlined into pagerank.c(174,14)
<Remainder>
LOOP END

LOOP BEGIN at pagerank.c(89,5) inlined into pagerank.c(174,14)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at pagerank.c(90,9) inlined into pagerank.c(174,14)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mt19937p.c(77,9) inlined into pagerank.c(174,14)
         remark #15388: vectorization support: reference mt has aligned access   [ mt19937p.c(78,13) ]
         remark #15389: vectorization support: reference mt has unaligned access   [ mt19937p.c(78,13) ]
         remark #15388: vectorization support: reference mt has aligned access   [ mt19937p.c(79,13) ]
         remark #15389: vectorization support: reference mt has unaligned access   [ mt19937p.c(79,13) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15415: vectorization support: gather was generated for the variable mag01:  indirect access, 64bit indexed   [ mt19937p.c(79,60) ]
         remark #15399: vectorization support: unroll factor set to 2
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15458: masked indexed (or gather) loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 13 
         remark #15477: vector loop cost: 10.120 
         remark #15478: estimated potential speedup: 1.270 
         remark #15479: lightweight vector operations: 26 
         remark #15481: heavy-overhead vector operations: 2 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at mt19937p.c(81,9) inlined into pagerank.c(174,14)
      <Peeled>
      LOOP END

      LOOP BEGIN at mt19937p.c(81,9) inlined into pagerank.c(174,14)
         remark #15388: vectorization support: reference mt has aligned access   [ mt19937p.c(82,13) ]
         remark #15389: vectorization support: reference mt has unaligned access   [ mt19937p.c(82,13) ]
         remark #15388: vectorization support: reference mt has aligned access   [ mt19937p.c(83,13) ]
         remark #15389: vectorization support: reference mt has unaligned access   [ mt19937p.c(83,13) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15415: vectorization support: gather was generated for the variable mag01:  indirect access, 64bit indexed   [ mt19937p.c(83,64) ]
         remark #15399: vectorization support: unroll factor set to 2
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15458: masked indexed (or gather) loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 12 
         remark #15477: vector loop cost: 9.870 
         remark #15478: estimated potential speedup: 1.200 
         remark #15479: lightweight vector operations: 22 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at mt19937p.c(81,9) inlined into pagerank.c(174,14)
      <Remainder>
      LOOP END

      LOOP BEGIN at mt19937p.c(77,9) inlined into pagerank.c(174,14)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at pagerank.c(104,5) inlined into pagerank.c(176,9)
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ pagerank.c(106,13) ]
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ pagerank.c(107,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between  line 106 and  line 107
   remark #15346: vector dependence: assumed OUTPUT dependence between  line 107 and  line 106

   LOOP BEGIN at pagerank.c(105,9) inlined into pagerank.c(176,9)
      remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ pagerank.c(106,13) ]
   LOOP END
LOOP END

LOOP BEGIN at pagerank.c(180,5)
<Peeled>
LOOP END

LOOP BEGIN at pagerank.c(180,5)
   remark #15388: vectorization support: reference w has aligned access   [ pagerank.c(181,9) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 32 
   remark #15477: vector loop cost: 1.500 
   remark #15478: estimated potential speedup: 16.460 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at pagerank.c(180,5)
<Remainder>
   remark #15389: vectorization support: reference w has unaligned access   [ pagerank.c(181,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at pagerank.c(180,5)
<Remainder>
LOOP END

LOOP BEGIN at pagerank.c(49,5) inlined into pagerank.c(186,22)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at pagerank.c(51,9) inlined into pagerank.c(186,22)
      remark #15415: vectorization support: gather was generated for the variable g:  strided by non-constant value   [ pagerank.c(52,22) ]
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15460: masked strided loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 2.870 
      remark #15478: estimated potential speedup: 1.940 
      remark #15479: lightweight vector operations: 4 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at pagerank.c(51,9) inlined into pagerank.c(186,22)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at pagerank.c(61,5) inlined into pagerank.c(186,22)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
LOOP END

LOOP BEGIN at pagerank.c(129,5) inlined into pagerank.c(197,12)
<Peeled>
LOOP END

LOOP BEGIN at pagerank.c(129,5) inlined into pagerank.c(197,12)
   remark #15388: vectorization support: reference w has aligned access   [ pagerank.c(130,9) ]
   remark #15399: vectorization support: unroll factor set to 8
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 1.250 
   remark #15478: estimated potential speedup: 3.900 
   remark #15479: lightweight vector operations: 5 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at pagerank.c(129,5) inlined into pagerank.c(197,12)
<Remainder>
   remark #15389: vectorization support: reference w has unaligned access   [ pagerank.c(130,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at pagerank.c(129,5) inlined into pagerank.c(197,12)
<Remainder>
LOOP END

LOOP BEGIN at pagerank.c(120,5) inlined into pagerank.c(201,9)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ pagerank.c(121,9) ]
LOOP END

LOOP BEGIN at pagerank.c(22,5) inlined into pagerank.c(186,22)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at pagerank.c(24,9) inlined into pagerank.c(186,22)
   <Peeled>
   LOOP END

   LOOP BEGIN at pagerank.c(24,9) inlined into pagerank.c(186,22)
      remark #15389: vectorization support: reference w has unaligned access   [ pagerank.c(28,17) ]
      remark #15389: vectorization support: reference degree has unaligned access   [ pagerank.c(28,17) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15456: masked unaligned unit stride loads: 2 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 35 
      remark #15477: vector loop cost: 15.000 
      remark #15478: estimated potential speedup: 2.270 
      remark #15479: lightweight vector operations: 19 
      remark #15487: type converts: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at pagerank.c(24,9) inlined into pagerank.c(186,22)
   <Remainder>
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at pagerank.c(160,5)
   remark #15535: loop was not vectorized: loop contains switch statement. Consider using if-else statement.   [ pagerank.c(161,9) ]
LOOP END
===========================================================================
