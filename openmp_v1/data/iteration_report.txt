Source Line  Source                                                                    CPU Time  Spin Time:Imbalance or Serial Spinning (OpenMP)  Spin Time:Lock Contention (OpenMP)  Spin Time:Communication (MPI)  Spin Time:Other  Overhead Time:Creation (OpenMP)  Overhead Time:Scheduling (OpenMP)  Overhead Time:Reduction (OpenMP)  Overhead Time:Other
-----------  ------------------------------------------------------------------------  --------  -----------------------------------------------  ----------------------------------  -----------------------------  ---------------  -------------------------------  ---------------------------------  --------------------------------  -------------------
13           /**                                                                                                                                                                                                                                                                                                                                               
14            * Pr(x) = (1-d)/n + d*sum_{n in g(n,x)}(Pr(n)/(outdegree n))                                                                                                                                                                                                                                                                                     
15            * Runs 1 iteration of pagerank                                                                                                                                                                                                                                                                                                                   
16            * Returns 1 if done, 0 otherwise                                                                                                                                                                                                                                                                                                                 
17            */                                                                                                                                                                                                                                                                                                                                               
18           int run_iteration(int n, double d, int* restrict g, double* restrict w)                                                                                                                                                                                                                                                                           
19           {                                                                                                                                                                                                                                                                                                                                                 
20               double* restrict wnew = (double*) calloc(n, sizeof(double));                                                                                                                                                                                                                                                                                  
21               int done = 1;                                                                                                                                                                                                                                                                                                                                 
22               #pragma omp parallel for shared(g, w, wnew) reduction(&& : done)                                                                                                                                                                                                                                                                              
23               for (int i=0; i<n; ++i) {                                                                                                                                                                                                                                                                                                                     
24                   double sum = 0.0;                                                                                                                                                                                                                                                                                                                         
25                   for (int j=0; j<n; ++j) {                                           0.013s                                               0s                                  0s                             0s               0s                               0s                                 0s                                0s                   0s
26                       //find edges pointing toward i                                                                                                                                                                                                                                                                                                        
27                       if (g(j,i)) {                                                   0.017s                                               0s                                  0s                             0s               0s                               0s                                 0s                                0s                   0s
28                           //count out degree of j                                                                                                                                                                                                                                                                                                           
29                           int jDegree = 0;                                            0.015s                                               0s                                  0s                             0s               0s                               0s                                 0s                                0s                   0s
30                           for (int k=0; k<n; ++k) {                                   0.176s                                               0s                                  0s                             0s               0s                               0s                                 0s                                0s                   0s
31                               jDegree += g(j,k);                                     18.557s                                               0s                                  0s                             0s               0s                               0s                                 0s                                0s                   0s
32                           }                                                                                                                                                                                                                                                                                                                                 
33                           sum += w[j]/(double)jDegree;                                0.058s                                               0s                                  0s                             0s               0s                               0s                                 0s                                0s                   0s
34                       }                                                                                                                                                                                                                                                                                                                                     
35                   }                                                                                                                                                                                                                                                                                                                                         
36                   wnew[i] = ((1.0 - d)/(double)n) + (d*sum);                          0.001s                                               0s                                  0s                             0s               0s                               0s                                 0s                                0s                   0s
37                   done = fabs(wnew[i] - w[i]) < 1.0/(1000000.0 * (double)n);                                                                                                                                                                                                                                                                                
38               }                                                                                                                                                                                                                                                                                                                                             
39               memcpy(w, wnew, n * sizeof(double));                                                                                                                                                                                                                                                                                                          
40               free(wnew);                                                                                                                                                                                                                                                                                                                                   
41               return done;                                                                                                                                                                                                                                                                                                                                  
42           }                                                                                                                                                                                                                                                                                                                                                 
43                                                                                                                                                                                                                                                                                                                                                             
44           /**                                                                                                                                                                                                                                                                                                                                               
45            *                                                                                                                                                                                                                                                                                                                                                
